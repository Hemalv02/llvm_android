From 7c384138dfeae9d8fa2d78485b2a4cff79d6afa8 Mon Sep 17 00:00:00 2001
From: AdityaK <appujee@google.com>
Date: Tue, 21 Nov 2023 10:19:39 -0800
Subject: [PATCH] Revert "[Clang] Fix member lookup so that we don't ignore
 ambiguous lookups in some cases"

This reverts commit cc1b6668c57170cd440d321037ced89d6a61a9cb.

Change-Id: I775e58f07c32181d2b3896510fa4373a661d5695
---
 clang/docs/ReleaseNotes.rst                   |  6 --
 clang/include/clang/Sema/Lookup.h             | 56 ++++++-------------
 clang/lib/Sema/SemaOverload.cpp               | 34 ++++++-----
 clang/lib/Sema/SemaTemplate.cpp               |  2 +-
 .../class.member.lookup/gh22413.cpp           | 19 -------
 .../class.derived/class.member.lookup/p11.cpp | 25 ---------
 clang/test/SemaCXX/arrow-operator.cpp         |  9 +--
 7 files changed, 38 insertions(+), 113 deletions(-)
 delete mode 100644 clang/test/CXX/class.derived/class.member.lookup/gh22413.cpp
 delete mode 100644 clang/test/CXX/class.derived/class.member.lookup/p11.cpp

diff --git a/clang/docs/ReleaseNotes.rst b/clang/docs/ReleaseNotes.rst
index 1e273c1b7ce4..1b16a6b8379e 100644
--- a/clang/docs/ReleaseNotes.rst
+++ b/clang/docs/ReleaseNotes.rst
@@ -224,12 +224,6 @@ Bug Fixes to C++ Support
   a Unicode character whose name contains a ``-``.
   (Fixes `#64161 <https://github.com/llvm/llvm-project/issues/64161>`_)
 
-- Fix cases where we ignore ambiguous name lookup when looking up members.
-  (`#22413 <https://github.com/llvm/llvm-project/issues/22413>`_),
-  (`#29942 <https://github.com/llvm/llvm-project/issues/29942>`_),
-  (`#35574 <https://github.com/llvm/llvm-project/issues/35574>`_) and
-  (`#27224 <https://github.com/llvm/llvm-project/issues/27224>`_).
-
 - Clang emits an error on substitution failure within lambda body inside a
   requires-expression. This fixes:
   (`#64138 <https://github.com/llvm/llvm-project/issues/64138>`_).
diff --git a/clang/include/clang/Sema/Lookup.h b/clang/include/clang/Sema/Lookup.h
index 9c93bf1e6fb4..7d3402d7d7ae 100644
--- a/clang/include/clang/Sema/Lookup.h
+++ b/clang/include/clang/Sema/Lookup.h
@@ -159,22 +159,20 @@ public:
       : SemaPtr(&SemaRef), NameInfo(NameInfo), LookupKind(LookupKind),
         Redecl(Redecl != Sema::NotForRedeclaration),
         ExternalRedecl(Redecl == Sema::ForExternalRedeclaration),
-        DiagnoseAccess(Redecl == Sema::NotForRedeclaration),
-        DiagnoseAmbiguous(Redecl == Sema::NotForRedeclaration) {
+        Diagnose(Redecl == Sema::NotForRedeclaration) {
     configure();
   }
 
   // TODO: consider whether this constructor should be restricted to take
   // as input a const IdentifierInfo* (instead of Name),
   // forcing other cases towards the constructor taking a DNInfo.
-  LookupResult(Sema &SemaRef, DeclarationName Name, SourceLocation NameLoc,
-               Sema::LookupNameKind LookupKind,
+  LookupResult(Sema &SemaRef, DeclarationName Name,
+               SourceLocation NameLoc, Sema::LookupNameKind LookupKind,
                Sema::RedeclarationKind Redecl = Sema::NotForRedeclaration)
       : SemaPtr(&SemaRef), NameInfo(Name, NameLoc), LookupKind(LookupKind),
         Redecl(Redecl != Sema::NotForRedeclaration),
         ExternalRedecl(Redecl == Sema::ForExternalRedeclaration),
-        DiagnoseAccess(Redecl == Sema::NotForRedeclaration),
-        DiagnoseAmbiguous(Redecl == Sema::NotForRedeclaration) {
+        Diagnose(Redecl == Sema::NotForRedeclaration) {
     configure();
   }
 
@@ -205,14 +203,12 @@ public:
         Redecl(std::move(Other.Redecl)),
         ExternalRedecl(std::move(Other.ExternalRedecl)),
         HideTags(std::move(Other.HideTags)),
-        DiagnoseAccess(std::move(Other.DiagnoseAccess)),
-        DiagnoseAmbiguous(std::move(Other.DiagnoseAmbiguous)),
+        Diagnose(std::move(Other.Diagnose)),
         AllowHidden(std::move(Other.AllowHidden)),
         Shadowed(std::move(Other.Shadowed)),
         TemplateNameLookup(std::move(Other.TemplateNameLookup)) {
     Other.Paths = nullptr;
-    Other.DiagnoseAccess = false;
-    Other.DiagnoseAmbiguous = false;
+    Other.Diagnose = false;
   }
 
   LookupResult &operator=(LookupResult &&Other) {
@@ -230,22 +226,17 @@ public:
     Redecl = std::move(Other.Redecl);
     ExternalRedecl = std::move(Other.ExternalRedecl);
     HideTags = std::move(Other.HideTags);
-    DiagnoseAccess = std::move(Other.DiagnoseAccess);
-    DiagnoseAmbiguous = std::move(Other.DiagnoseAmbiguous);
+    Diagnose = std::move(Other.Diagnose);
     AllowHidden = std::move(Other.AllowHidden);
     Shadowed = std::move(Other.Shadowed);
     TemplateNameLookup = std::move(Other.TemplateNameLookup);
     Other.Paths = nullptr;
-    Other.DiagnoseAccess = false;
-    Other.DiagnoseAmbiguous = false;
+    Other.Diagnose = false;
     return *this;
   }
 
   ~LookupResult() {
-    if (DiagnoseAccess)
-      diagnoseAccess();
-    if (DiagnoseAmbiguous)
-      diagnoseAmbiguous();
+    if (Diagnose) diagnose();
     if (Paths) deletePaths(Paths);
   }
 
@@ -627,20 +618,13 @@ public:
   /// Suppress the diagnostics that would normally fire because of this
   /// lookup.  This happens during (e.g.) redeclaration lookups.
   void suppressDiagnostics() {
-    DiagnoseAccess = false;
-    DiagnoseAmbiguous = false;
+    Diagnose = false;
   }
 
-  /// Suppress the diagnostics that would normally fire because of this
-  /// lookup due to access control violations.
-  void suppressAccessDiagnostics() { DiagnoseAccess = false; }
-
-  /// Determines whether this lookup is suppressing access control diagnostics.
-  bool isSuppressingAccessDiagnostics() const { return !DiagnoseAccess; }
-
-  /// Determines whether this lookup is suppressing ambiguous lookup
-  /// diagnostics.
-  bool isSuppressingAmbiguousDiagnostics() const { return !DiagnoseAmbiguous; }
+  /// Determines whether this lookup is suppressing diagnostics.
+  bool isSuppressingDiagnostics() const {
+    return !Diagnose;
+  }
 
   /// Sets a 'context' source range.
   void setContextRange(SourceRange SR) {
@@ -753,14 +737,11 @@ public:
   }
 
 private:
-  void diagnoseAccess() {
-    if (isClassLookup() && getSema().getLangOpts().AccessControl)
-      getSema().CheckLookupAccess(*this);
-  }
-
-  void diagnoseAmbiguous() {
+  void diagnose() {
     if (isAmbiguous())
       getSema().DiagnoseAmbiguousLookup(*this);
+    else if (isClassLookup() && getSema().getLangOpts().AccessControl)
+      getSema().CheckLookupAccess(*this);
   }
 
   void setAmbiguous(AmbiguityKind AK) {
@@ -806,8 +787,7 @@ private:
   ///   are present
   bool HideTags = true;
 
-  bool DiagnoseAccess = false;
-  bool DiagnoseAmbiguous = false;
+  bool Diagnose = false;
 
   /// True if we should allow hidden declarations to be 'visible'.
   bool AllowHidden = false;
diff --git a/clang/lib/Sema/SemaOverload.cpp b/clang/lib/Sema/SemaOverload.cpp
index 78eb8d689b11..80e999cd4a9d 100644
--- a/clang/lib/Sema/SemaOverload.cpp
+++ b/clang/lib/Sema/SemaOverload.cpp
@@ -950,7 +950,7 @@ static bool shouldAddReversedEqEq(Sema &S, SourceLocation OpLoc,
     LookupResult Members(S, NotEqOp, OpLoc,
                          Sema::LookupNameKind::LookupMemberName);
     S.LookupQualifiedName(Members, RHSRec->getDecl());
-    Members.suppressAccessDiagnostics();
+    Members.suppressDiagnostics();
     for (NamedDecl *Op : Members)
       if (FunctionsCorrespond(S.Context, EqFD, Op->getAsFunction()))
         return false;
@@ -961,7 +961,7 @@ static bool shouldAddReversedEqEq(Sema &S, SourceLocation OpLoc,
                           Sema::LookupNameKind::LookupOperatorName);
   S.LookupName(NonMembers,
                S.getScopeForContext(EqFD->getEnclosingNamespaceContext()));
-  NonMembers.suppressAccessDiagnostics();
+  NonMembers.suppressDiagnostics();
   for (NamedDecl *Op : NonMembers) {
     auto *FD = Op->getAsFunction();
     if(auto* UD = dyn_cast<UsingShadowDecl>(Op))
@@ -8008,7 +8008,7 @@ void Sema::AddMemberOperatorCandidates(OverloadedOperatorKind Op,
 
     LookupResult Operators(*this, OpName, OpLoc, LookupOrdinaryName);
     LookupQualifiedName(Operators, T1Rec->getDecl());
-    Operators.suppressAccessDiagnostics();
+    Operators.suppressDiagnostics();
 
     for (LookupResult::iterator Oper = Operators.begin(),
                                 OperEnd = Operators.end();
@@ -15048,7 +15048,7 @@ Sema::BuildCallToObjectOfClassType(Scope *S, Expr *Obj,
   const auto *Record = Object.get()->getType()->castAs<RecordType>();
   LookupResult R(*this, OpName, LParenLoc, LookupOrdinaryName);
   LookupQualifiedName(R, Record->getDecl());
-  R.suppressAccessDiagnostics();
+  R.suppressDiagnostics();
 
   for (LookupResult::iterator Oper = R.begin(), OperEnd = R.end();
        Oper != OperEnd; ++Oper) {
@@ -15145,13 +15145,12 @@ Sema::BuildCallToObjectOfClassType(Scope *S, Expr *Obj,
     break;
   }
   case OR_Ambiguous:
-    if (!R.isAmbiguous())
-      CandidateSet.NoteCandidates(
-          PartialDiagnosticAt(Object.get()->getBeginLoc(),
-                              PDiag(diag::err_ovl_ambiguous_object_call)
-                                  << Object.get()->getType()
-                                  << Object.get()->getSourceRange()),
-          *this, OCD_AmbiguousCandidates, Args);
+    CandidateSet.NoteCandidates(
+        PartialDiagnosticAt(Object.get()->getBeginLoc(),
+                            PDiag(diag::err_ovl_ambiguous_object_call)
+                                << Object.get()->getType()
+                                << Object.get()->getSourceRange()),
+        *this, OCD_AmbiguousCandidates, Args);
     break;
 
   case OR_Deleted:
@@ -15314,7 +15313,7 @@ Sema::BuildOverloadedArrowExpr(Scope *S, Expr *Base, SourceLocation OpLoc,
 
   LookupResult R(*this, OpName, OpLoc, LookupOrdinaryName);
   LookupQualifiedName(R, Base->getType()->castAs<RecordType>()->getDecl());
-  R.suppressAccessDiagnostics();
+  R.suppressDiagnostics();
 
   for (LookupResult::iterator Oper = R.begin(), OperEnd = R.end();
        Oper != OperEnd; ++Oper) {
@@ -15355,12 +15354,11 @@ Sema::BuildOverloadedArrowExpr(Scope *S, Expr *Base, SourceLocation OpLoc,
     return ExprError();
   }
   case OR_Ambiguous:
-    if (!R.isAmbiguous())
-      CandidateSet.NoteCandidates(
-          PartialDiagnosticAt(OpLoc, PDiag(diag::err_ovl_ambiguous_oper_unary)
-                                         << "->" << Base->getType()
-                                         << Base->getSourceRange()),
-          *this, OCD_AmbiguousCandidates, Base);
+    CandidateSet.NoteCandidates(
+        PartialDiagnosticAt(OpLoc, PDiag(diag::err_ovl_ambiguous_oper_unary)
+                                       << "->" << Base->getType()
+                                       << Base->getSourceRange()),
+        *this, OCD_AmbiguousCandidates, Base);
     return ExprError();
 
   case OR_Deleted:
diff --git a/clang/lib/Sema/SemaTemplate.cpp b/clang/lib/Sema/SemaTemplate.cpp
index 0dd24d17410d..a1f0f5732b2b 100644
--- a/clang/lib/Sema/SemaTemplate.cpp
+++ b/clang/lib/Sema/SemaTemplate.cpp
@@ -593,7 +593,7 @@ bool Sema::LookupTemplateName(LookupResult &Found,
       //     postfix-expression and does not name a class template, the name
       //     found in the class of the object expression is used, otherwise
       FoundOuter.clear();
-    } else if (!Found.isSuppressingAmbiguousDiagnostics()) {
+    } else if (!Found.isSuppressingDiagnostics()) {
       //   - if the name found is a class template, it must refer to the same
       //     entity as the one found in the class of the object expression,
       //     otherwise the program is ill-formed.
diff --git a/clang/test/CXX/class.derived/class.member.lookup/gh22413.cpp b/clang/test/CXX/class.derived/class.member.lookup/gh22413.cpp
deleted file mode 100644
index 19fb11783544..000000000000
--- a/clang/test/CXX/class.derived/class.member.lookup/gh22413.cpp
+++ /dev/null
@@ -1,19 +0,0 @@
-// RUN: %clang_cc1 -fsyntax-only -verify %s
-
-struct A {
-  void operator()(int); // expected-note {{member found by ambiguous name lookup}}
-  void f(int); // expected-note {{member found by ambiguous name lookup}}
-};
-struct B {
-  void operator()(); // expected-note {{member found by ambiguous name lookup}}
-  void f() {} // expected-note {{member found by ambiguous name lookup}}
-};
-
-struct C : A, B {};
-
-int f() {
-    C c;
-    c(); // expected-error {{member 'operator()' found in multiple base classes of different types}}
-    c.f(10); //expected-error {{member 'f' found in multiple base classes of different types}}
-    return 0;
-}
diff --git a/clang/test/CXX/class.derived/class.member.lookup/p11.cpp b/clang/test/CXX/class.derived/class.member.lookup/p11.cpp
deleted file mode 100644
index e0899b227e69..000000000000
--- a/clang/test/CXX/class.derived/class.member.lookup/p11.cpp
+++ /dev/null
@@ -1,25 +0,0 @@
-// RUN: %clang_cc1 -fsyntax-only -verify %s
-
-struct B1 {
-  void f();
-  static void f(int);
-  int i; // expected-note 2{{member found by ambiguous name lookup}}
-};
-struct B2 {
-  void f(double);
-};
-struct I1: B1 { };
-struct I2: B1 { };
-
-struct D: I1, I2, B2 {
-  using B1::f;
-  using B2::f;
-  void g() {
-    f(); // expected-error {{ambiguous conversion from derived class 'D' to base class 'B1'}}
-    f(0); // ok
-    f(0.0); // ok
-    // FIXME next line should be well-formed
-    int B1::* mpB1 = &D::i; // expected-error {{non-static member 'i' found in multiple base-class subobjects of type 'B1'}}
-    int D::* mpD = &D::i; // expected-error {{non-static member 'i' found in multiple base-class subobjects of type 'B1'}}
-  }
-};
diff --git a/clang/test/SemaCXX/arrow-operator.cpp b/clang/test/SemaCXX/arrow-operator.cpp
index 295dea3c1756..108ddc08d143 100644
--- a/clang/test/SemaCXX/arrow-operator.cpp
+++ b/clang/test/SemaCXX/arrow-operator.cpp
@@ -4,13 +4,11 @@ struct T {
 };
 
 struct A {
-  T* operator->();
-                   // expected-note@-1 {{member found by ambiguous name lookup}}
+  T* operator->(); // expected-note{{candidate function}}
 };
 
 struct B {
-  T* operator->();
-                   // expected-note@-1 {{member found by ambiguous name lookup}}
+  T* operator->(); // expected-note{{candidate function}}
 };
 
 struct C : A, B {
@@ -21,8 +19,7 @@ struct D : A { };
 struct E; // expected-note {{forward declaration of 'E'}}
 
 void f(C &c, D& d, E& e) {
-  c->f();
-          // expected-error@-1 {{member 'operator->' found in multiple base classes of different types}}
+  c->f(); // expected-error{{use of overloaded operator '->' is ambiguous}}
   d->f();
   e->f(); // expected-error{{incomplete definition of type}}
 }
-- 
2.43.0.rc1.413.gea7ed67945-goog

