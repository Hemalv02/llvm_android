From 18aea758b48507138791470b693582076405b2b1 Mon Sep 17 00:00:00 2001
From: Ryan Prichard <rprichard@google.com>
Date: Thu, 28 Apr 2022 16:21:16 -0700
Subject: [PATCH] fs tests: avoid fifo/socket/hardlink SELinux denials

Maybe it should use new Lit features instead of checking __ANDROID__.
---
 .../directory_entry.obs/file_size.pass.cpp           |  2 +-
 .../directory_entry.obs/file_type_obs.pass.cpp       | 12 ++++++++++--
 .../directory_entry.obs/hard_link_count.pass.cpp     |  4 +++-
 .../filesystems/fs.op.funcs/fs.op.copy/copy.pass.cpp |  6 ++++--
 .../fs.op.funcs/fs.op.copy_file/copy_file.pass.cpp   |  2 +-
 .../fs.op.create_hard_link/create_hard_link.pass.cpp |  7 +++++++
 .../fs.op.funcs/fs.op.equivalent/equivalent.pass.cpp |  4 +++-
 .../fs.op.hard_lk_ct/hard_link_count.pass.cpp        |  4 +++-
 .../fs.op.funcs/fs.op.is_empty/is_empty.pass.cpp     |  2 +-
 .../fs.op.funcs/fs.op.status/status.pass.cpp         |  4 ++--
 .../fs.op.symlink_status/symlink_status.pass.cpp     |  4 ++--
 11 files changed, 37 insertions(+), 14 deletions(-)

diff --git a/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/file_size.pass.cpp b/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/file_size.pass.cpp
index c1e9130a3136..91a1452eed87 100644
--- a/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/file_size.pass.cpp
+++ b/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/file_size.pass.cpp
@@ -87,7 +87,7 @@ TEST_CASE(not_regular_file) {
     std::errc expected_err;
   } TestCases[] = {
       {env.create_dir("dir"), std::errc::is_a_directory},
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__ANDROID__)
       {env.create_fifo("fifo"), std::errc::not_supported},
 #endif
       {env.create_directory_symlink("dir", "sym"), std::errc::is_a_directory}};
diff --git a/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/file_type_obs.pass.cpp b/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/file_type_obs.pass.cpp
index 541a6d9c9ffb..a48757de3304 100644
--- a/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/file_type_obs.pass.cpp
+++ b/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/file_type_obs.pass.cpp
@@ -65,7 +65,9 @@ TEST_CASE(test_without_ec) {
   scoped_test_env env;
   path f = env.create_file("foo", 42);
   path d = env.create_dir("dir");
+#if !defined(__ANDROID__)
   path hl = env.create_hardlink("foo", "hl");
+#endif
   auto test_path = [=](const path &p) {
     directory_entry e(p);
     file_status st = status(p);
@@ -85,8 +87,10 @@ TEST_CASE(test_without_ec) {
   };
   test_path(f);
   test_path(d);
+#if !defined(__ANDROID__)
   test_path(hl);
-#ifndef _WIN32
+#endif
+#if !defined(_WIN32) && !defined(__ANDROID__)
   path fifo = env.create_fifo("fifo");
   test_path(fifo);
 #endif
@@ -101,7 +105,9 @@ TEST_CASE(test_with_ec) {
   scoped_test_env env;
   path f = env.create_file("foo", 42);
   path d = env.create_dir("dir");
+#if !defined(__ANDROID__)
   path hl = env.create_hardlink("foo", "hl");
+#endif
   auto test_path = [=](const path &p) {
     directory_entry e(p);
     std::error_code status_ec = GetTestEC();
@@ -149,8 +155,10 @@ TEST_CASE(test_with_ec) {
   };
   test_path(f);
   test_path(d);
+#if !defined(__ANDROID__)
   test_path(hl);
-#ifndef _WIN32
+#endif
+#if !defined(_WIN32) && !defined(__ANDROID__)
   path fifo = env.create_fifo("fifo");
   test_path(fifo);
 #endif
diff --git a/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/hard_link_count.pass.cpp b/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/hard_link_count.pass.cpp
index bd3166850495..f083b76d9612 100644
--- a/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/hard_link_count.pass.cpp
+++ b/libcxx/test/std/input.output/filesystems/class.directory_entry/directory_entry.obs/hard_link_count.pass.cpp
@@ -72,6 +72,7 @@ TEST_CASE(basic) {
     TEST_CHECK(ent.hard_link_count(ec) == expect);
     TEST_CHECK(!ec);
   }
+#if !defined(__ANDROID__)
   env.create_file("file", 99);
   env.create_hardlink("file", "hl");
   {
@@ -80,6 +81,7 @@ TEST_CASE(basic) {
     TEST_CHECK(ent.hard_link_count(ec) == 2);
     TEST_CHECK(!ec);
   }
+#endif
 }
 
 TEST_CASE(not_regular_file) {
@@ -107,7 +109,7 @@ TEST_CASE(not_regular_file) {
     permissions(dir, old_perms);
   };
   test_path(dir2);
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__ANDROID__)
   const path fifo = env.create_fifo("dir/fifo");
   const path sym_to_fifo = env.create_symlink("dir/fifo", "dir/sym");
   test_path(fifo);
diff --git a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.copy/copy.pass.cpp b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.copy/copy.pass.cpp
index 3f9574de0bb0..bf9371e90b5b 100644
--- a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.copy/copy.pass.cpp
+++ b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.copy/copy.pass.cpp
@@ -67,7 +67,7 @@ TEST_CASE(test_error_reporting)
     scoped_test_env env;
     const path file = env.create_file("file1", 42);
     const path dir = env.create_dir("dir");
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__ANDROID__)
     const path fifo = env.create_fifo("fifo");
     TEST_REQUIRE(is_other(fifo));
 #endif
@@ -98,7 +98,7 @@ TEST_CASE(test_error_reporting)
         TEST_REQUIRE(ec != test_ec);
         TEST_CHECK(checkThrow(dir, file, ec));
     }
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__ANDROID__)
     { // is_other(from)
         std::error_code ec = test_ec;
         fs::copy(fifo, dir, ec);
@@ -171,6 +171,7 @@ TEST_CASE(from_is_regular_file)
         TEST_CHECK(is_symlink(dest));
         TEST_CHECK(equivalent(file, canonical(dest)));
     }
+#if !defined(__ANDROID__) // SELinux restriction (maybe root shell would work?)
     { // create hard link to file
         const path dest = env.make_env_path("hardlink");
         TEST_CHECK(hard_link_count(file) == 1);
@@ -180,6 +181,7 @@ TEST_CASE(from_is_regular_file)
         TEST_CHECK(exists(dest));
         TEST_CHECK(hard_link_count(file) == 2);
     }
+#endif
     { // is_directory(t)
         const path dest_dir = env.create_dir("dest_dir");
         const path expect_dest = dest_dir / file.filename();
diff --git a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.copy_file/copy_file.pass.cpp b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.copy_file/copy_file.pass.cpp
index 85e8416abcc1..be0c00768c30 100644
--- a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.copy_file/copy_file.pass.cpp
+++ b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.copy_file/copy_file.pass.cpp
@@ -77,7 +77,7 @@ TEST_CASE(test_error_reporting) {
   }
 }
 
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__ANDROID__)
 TEST_CASE(non_regular_file_test) {
   scoped_test_env env;
   const path fifo = env.create_fifo("fifo");
diff --git a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.create_hard_link/create_hard_link.pass.cpp b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.create_hard_link/create_hard_link.pass.cpp
index c6785e6bc47b..4ea6c4ad59eb 100644
--- a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.create_hard_link/create_hard_link.pass.cpp
+++ b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.create_hard_link/create_hard_link.pass.cpp
@@ -45,6 +45,12 @@ TEST_CASE(test_error_reporting)
     }
 }
 
+// TODO(rprichard): For Android, the other create_hard_link calls are OK and
+// do not trip an SELinux error, because they fail for other reasons first.
+// If we add a "fs_hard_link" Lit feature, though, we may want to disable the
+// other calls here too. (Maybe this hard link stuff can be tested on Android
+// with root?)
+#if !defined(__ANDROID__)
 TEST_CASE(create_file_hard_link)
 {
     scoped_test_env env;
@@ -58,6 +64,7 @@ TEST_CASE(create_file_hard_link)
     TEST_CHECK(equivalent(dest, file));
     TEST_CHECK(hard_link_count(file) == 2);
 }
+#endif
 
 TEST_CASE(create_directory_hard_link_fails)
 {
diff --git a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.equivalent/equivalent.pass.cpp b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.equivalent/equivalent.pass.cpp
index 5fe888609a92..79e6b0b96a16 100644
--- a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.equivalent/equivalent.pass.cpp
+++ b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.equivalent/equivalent.pass.cpp
@@ -87,6 +87,7 @@ TEST_CASE(equivalent_reports_error_if_input_dne) {
   }
 }
 
+#if !defined(__ANDROID__)
 TEST_CASE(equivalent_hardlink_succeeds) {
   scoped_test_env env;
   path const file = env.create_file("file", 42);
@@ -96,8 +97,9 @@ TEST_CASE(equivalent_hardlink_succeeds) {
   TEST_CHECK(equivalent(file, hl2));
   TEST_CHECK(equivalent(hl1, hl2));
 }
+#endif
 
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__ANDROID__)
 TEST_CASE(equivalent_is_other_succeeds) {
   scoped_test_env env;
   path const file = env.create_file("file", 42);
diff --git a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.hard_lk_ct/hard_link_count.pass.cpp b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.hard_lk_ct/hard_link_count.pass.cpp
index 38b26710f1a9..b00683f2e695 100644
--- a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.hard_lk_ct/hard_link_count.pass.cpp
+++ b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.hard_lk_ct/hard_link_count.pass.cpp
@@ -72,6 +72,8 @@ TEST_CASE(hard_link_count_for_directory)
                hard_link_count(static_env.Dir3, ec) == Dir3ExpectAlt ||
                hard_link_count(static_env.Dir3) == 1);
 }
+
+#if !defined(__ANDROID__)
 TEST_CASE(hard_link_count_increments_test)
 {
     scoped_test_env env;
@@ -81,7 +83,7 @@ TEST_CASE(hard_link_count_increments_test)
     env.create_hardlink(file, "file_hl");
     TEST_CHECK(hard_link_count(file) == 2);
 }
-
+#endif
 
 TEST_CASE(hard_link_count_error_cases)
 {
diff --git a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.is_empty/is_empty.pass.cpp b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.is_empty/is_empty.pass.cpp
index 8478037a03c6..89d931371f41 100644
--- a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.is_empty/is_empty.pass.cpp
+++ b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.is_empty/is_empty.pass.cpp
@@ -113,7 +113,7 @@ TEST_CASE(test_directory_access_denied)
 }
 
 
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__ANDROID__)
 TEST_CASE(test_fifo_fails)
 {
     scoped_test_env env;
diff --git a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.status/status.pass.cpp b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.status/status.pass.cpp
index 3fa9f58b77b9..5de222a31f26 100644
--- a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.status/status.pass.cpp
+++ b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.status/status.pass.cpp
@@ -120,10 +120,10 @@ TEST_CASE(status_file_types_test)
 #ifndef _WIN32
         {static_env.CharFile, file_type::character},
 #endif
-#if !defined(__APPLE__) && !defined(__FreeBSD__) && !defined(_WIN32) // No support for domain sockets
+#if !defined(__APPLE__) && !defined(__FreeBSD__) && !defined(_WIN32) && !defined(__ANDROID__) // No support for domain sockets
         {env.create_socket("socket"), file_type::socket},
 #endif
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__ANDROID__)
         {env.create_fifo("fifo"), file_type::fifo}
 #endif
     };
diff --git a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.symlink_status/symlink_status.pass.cpp b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.symlink_status/symlink_status.pass.cpp
index a1d8ba6e09fc..056376488591 100644
--- a/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.symlink_status/symlink_status.pass.cpp
+++ b/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.symlink_status/symlink_status.pass.cpp
@@ -129,10 +129,10 @@ TEST_CASE(symlink_status_file_types_test)
 #ifndef _WIN32
         {static_env.CharFile, file_type::character},
 #endif
-#if !defined(__APPLE__) && !defined(__FreeBSD__) && !defined(_WIN32) // No support for domain sockets
+#if !defined(__APPLE__) && !defined(__FreeBSD__) && !defined(_WIN32) && !defined(__ANDROID__) // No support for domain sockets
         {env.create_socket("socket"), file_type::socket},
 #endif
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__ANDROID__)
         {env.create_fifo("fifo"), file_type::fifo}
 #endif
     };
-- 
2.39.0.314.g84b9a713c41-goog

