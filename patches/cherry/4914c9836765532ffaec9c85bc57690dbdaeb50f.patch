From 4914c9836765532ffaec9c85bc57690dbdaeb50f Mon Sep 17 00:00:00 2001
From: Nick Desaulniers <ndesaulniers@google.com>
Date: Mon, 12 Apr 2021 15:55:53 -0700
Subject: [PATCH] [SantizerCoverage] handle missing DBG MD when inserting
 libcalls

Instruction::getDebugLoc can return an invalid DebugLoc. For such cases
where metadata was accidentally removed from the libcall insertion
point, simply insert a DILocation with line 0 scoped to the caller. When
we can inline the libcall, such as during LTO, then we won't fail a
Verifier check that all calls to functions with debug metadata
themselves must have debug metadata.

Reviewed By: dblaikie

Differential Revision: https://reviews.llvm.org/D100158
---
 .../Instrumentation/SanitizerCoverage.cpp     |  3 ++
 .../SanitizerCoverage/crit-edge-sancov.ll     | 52 +++++++++++++++++++
 2 files changed, 55 insertions(+)
 create mode 100644 llvm/test/Instrumentation/SanitizerCoverage/crit-edge-sancov.ll

diff --git a/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp b/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp
index 166dd108f81b..60cdecdc018a 100644
--- a/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp
+++ b/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp
@@ -904,6 +904,9 @@ void ModuleSanitizerCoverage::InjectCoverageAtBlock(Function &F, BasicBlock &BB,
     IP = PrepareToSplitEntryBlock(BB, IP);
   } else {
     EntryLoc = IP->getDebugLoc();
+    if (!EntryLoc)
+      if (auto *SP = F.getSubprogram())
+        EntryLoc = DILocation::get(SP->getContext(), 0, 0, SP);
   }
 
   IRBuilder<> IRB(&*IP);
diff --git a/llvm/test/Instrumentation/SanitizerCoverage/crit-edge-sancov.ll b/llvm/test/Instrumentation/SanitizerCoverage/crit-edge-sancov.ll
new file mode 100644
index 000000000000..a752562f144a
--- /dev/null
+++ b/llvm/test/Instrumentation/SanitizerCoverage/crit-edge-sancov.ll
@@ -0,0 +1,52 @@
+; RUN: opt -passes='module(sancov-module)' -sanitizer-coverage-trace-pc \
+; RUN: -sanitizer-coverage-level=3 %s -S -o - | FileCheck %s
+
+; The edge between %entry and %for.inc.i is a critical edge.
+; ModuleSanitizerCoveragePass must split this critical edge in order to track
+; coverage of this edge. ModuleSanitizerCoveragePass will also insert calls to
+; @__sanitizer_cov_trace_pc using the debug location from the predecessor's
+; branch.  but, if the branch itself is missing debug info (say, by accident
+; due to a bug in an earlier transform), we would fail a verifier check that
+; verifies calls to functions with debug info themselves have debug info.
+; The definition of @__sanitizer_cov_trace_pc may be visible during LTO.
+
+; Of the below checks, we really only care that the calls to
+; @__sanitizer_cov_trace_pc retain !dbg metadata.
+
+define void @update_shadow() !dbg !3 {
+; CHECK-LABEL: @update_shadow(
+; CHECK-NEXT:  entry:
+; CHECK-NEXT:    call void @__sanitizer_cov_trace_pc() #[[ATTR0:[0-9]+]], !dbg [[DBG6:![0-9]+]]
+; CHECK:       entry.for.inc.i_crit_edge:
+; CHECK-NEXT:    call void @__sanitizer_cov_trace_pc() #[[ATTR0]], !dbg [[DBG7:![0-9]+]]
+; CHECK:       if.end22.i:
+; CHECK-NEXT:    call void @__sanitizer_cov_trace_pc() #[[ATTR0]], !dbg [[DBG8:![0-9]+]]
+; CHECK:       [[DBG6]] = !DILocation(line: 192, scope: !3)
+; CHECK:       [[DBG7]] = !DILocation(line: 0, scope: !3)
+; CHECK:       [[DBG8]] = !DILocation(line: 129, column: 2, scope: !3)
+entry:
+  br i1 undef, label %for.inc.i, label %if.end22.i
+
+if.end22.i:                                       ; preds = %entry
+  br label %for.inc.i, !dbg !8
+
+for.inc.i:                                        ; preds = %if.end22.i, %entry
+  ret void, !dbg !6
+}
+
+define void @__sanitizer_cov_trace_pc() !dbg !7{
+  ret void
+}
+
+!llvm.dbg.cu = !{!0}
+!llvm.module.flags = !{!2}
+
+!0 = distinct !DICompileUnit(language: DW_LANG_C89, file: !1, producer: "", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, splitDebugInlining: false, nameTableKind: None)
+!1 = !DIFile(filename: "kernel/cfi.c", directory: "")
+!2 = !{i32 2, !"Debug Info Version", i32 3}
+!3 = distinct !DISubprogram(name: "update_shadow", scope: !1, file: !1, line: 190, type: !4, scopeLine: 192, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0)
+!4 = !DISubroutineType(types: !5)
+!5 = !{}
+!6 = !DILocation(line: 223, column: 1, scope: !3)
+!7 = distinct !DISubprogram(name: "__sanitizer_cov_trace_pc", scope: !1, file: !1, line: 200, type: !4, scopeLine: 200, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0)
+!8 = !DILocation(line: 129, column: 2, scope: !3)
-- 
2.31.1.295.g9ea45b61b8-goog

