From b9738d6d99f614c8bf7a3e7c769659b313b88244 Mon Sep 17 00:00:00 2001
From: David Goldman <davg@google.com>
Date: Fri, 25 Oct 2019 13:15:25 -0400
Subject: UPSTREAM: [Sema][Typo Correction] Fix another infinite loop on
 ambiguity

See also: D67515

- For the given call expression we would end up repeatedly
   trying to transform the same expression over and over again

- Fix is to keep the old TransformCache when checking for ambiguity

Differential Revision: https://reviews.llvm.org/D69060

Bug: 139945549
Bug: 145623332
(cherry picked from commit 7a2b704bf0cf65f9eb46fe3668a83b75aa2d80a6)
Change-Id: Ie154eaf6363c8263f31329c1230fe398dcebd8f5
Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
---
 clang/lib/Sema/SemaExprCXX.cpp              |  5 +++--
 clang/test/Sema/typo-correction-ambiguity.c | 14 ++++++++++++++
 2 files changed, 17 insertions(+), 2 deletions(-)
 create mode 100644 clang/test/Sema/typo-correction-ambiguity.c

diff --git a/clang/lib/Sema/SemaExprCXX.cpp b/clang/lib/Sema/SemaExprCXX.cpp
index 10180351925..56df3cac851 100644
--- a/clang/lib/Sema/SemaExprCXX.cpp
+++ b/clang/lib/Sema/SemaExprCXX.cpp
@@ -7741,8 +7741,9 @@ class TransformTypos : public TreeTransform<TransformTypos> {
 
     // If we found a valid result, double check to make sure it's not ambiguous.
     if (!IsAmbiguous && !Res.isInvalid() && !AmbiguousTypoExprs.empty()) {
-      auto SavedTransformCache = std::move(TransformCache);
-      TransformCache.clear();
+      auto SavedTransformCache =
+          llvm::SmallDenseMap<TypoExpr *, ExprResult, 2>(TransformCache);
+
       // Ensure none of the TypoExprs have multiple typo correction candidates
       // with the same edit length that pass all the checks and filters.
       while (!AmbiguousTypoExprs.empty()) {
diff --git a/clang/test/Sema/typo-correction-ambiguity.c b/clang/test/Sema/typo-correction-ambiguity.c
new file mode 100644
index 00000000000..bebbf25ce29
--- /dev/null
+++ b/clang/test/Sema/typo-correction-ambiguity.c
@@ -0,0 +1,14 @@
+// RUN: %clang_cc1 -fsyntax-only -verify %s
+
+// Check the following typo correction behavior in C:
+// - no typos are diagnosed when a call expression has ambiguous (multiple) corrections
+
+int v_63;
+
+void v_2_0(int v_452, int v_454) {}
+
+int v_3_0() {
+   for (int v_345 = 0 ; v_63;)
+       v_2_0(v_195,  // expected-error {{use of undeclared identifier 'v_195'}}
+             v_231);  // expected-error {{use of undeclared identifier 'v_231'}}
+}
-- 
2.25.0.341.g760bfbb309-goog

