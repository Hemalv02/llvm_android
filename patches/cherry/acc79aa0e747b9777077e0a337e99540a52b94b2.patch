From acc79aa0e747b9777077e0a337e99540a52b94b2 Mon Sep 17 00:00:00 2001
From: Yi Kong <yikong@google.com>
Date: Thu, 21 Nov 2019 14:14:33 -0800
Subject: [PATCH] Revert "Revert 1689ad27af5 "[builtins] Implement rounding
 mode support for i386/x86_64""

Don't build specilised fp_mode.c on MSVC since it does not support
inline ASM on x86_64.

This reverts commit a19f0eec94e195cac676d0d473882b48f4fded90.
---
 compiler-rt/lib/builtins/CMakeLists.txt      |  7 ++++
 compiler-rt/lib/builtins/i386/fp_mode.c      | 39 ++++++++++++++++++++
 compiler-rt/test/builtins/Unit/addtf3_test.c |  3 +-
 compiler-rt/test/builtins/Unit/subtf3_test.c |  3 +-
 4 files changed, 50 insertions(+), 2 deletions(-)
 create mode 100644 compiler-rt/lib/builtins/i386/fp_mode.c

diff --git a/compiler-rt/lib/builtins/CMakeLists.txt b/compiler-rt/lib/builtins/CMakeLists.txt
index 1a63aad0e8f..feacd21d086 100644
--- a/compiler-rt/lib/builtins/CMakeLists.txt
+++ b/compiler-rt/lib/builtins/CMakeLists.txt
@@ -241,6 +241,13 @@ set(x86_ARCH_SOURCES
   powixf2.c
 )
 
+if (NOT MSVC)
+  set(x86_ARCH_SOURCES
+    ${x86_ARCH_SOURCES}
+    i386/fp_mode.c
+  )
+endif ()
+
 if (NOT MSVC)
   set(x86_64_SOURCES
     ${GENERIC_TF_SOURCES}
diff --git a/compiler-rt/lib/builtins/i386/fp_mode.c b/compiler-rt/lib/builtins/i386/fp_mode.c
new file mode 100644
index 00000000000..62ab771222c
--- /dev/null
+++ b/compiler-rt/lib/builtins/i386/fp_mode.c
@@ -0,0 +1,39 @@
+//===----- lib/i386/fp_mode.c - Floaing-point mode utilities -----*- C -*-====//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#include "../fp_mode.h"
+
+#define X87_TONEAREST  0x0000
+#define X87_DOWNWARD   0x0400
+#define X87_UPWARD     0x0800
+#define X87_TOWARDZERO 0x0c00
+#define X87_RMODE_MASK (X87_TONEAREST | X87_UPWARD | X87_DOWNWARD | X87_TOWARDZERO)
+
+FE_ROUND_MODE __fe_getround() {
+  // Assume that the rounding mode state for the fpu agrees with the SSE unit.
+  unsigned short cw;
+  __asm__ __volatile__ ("fnstcw %0" : "=m" (cw));
+
+  switch (cw & X87_RMODE_MASK) {
+    case X87_TONEAREST:
+      return FE_TONEAREST;
+    case X87_DOWNWARD:
+      return FE_DOWNWARD;
+    case X87_UPWARD:
+      return FE_UPWARD;
+    case X87_TOWARDZERO:
+      return FE_TOWARDZERO;
+  }
+  return FE_TONEAREST;
+}
+
+int __fe_raise_inexact() {
+  float f = 1.0f, g = 3.0f;
+  __asm__ __volatile__ ("fdivs %1" : "+t" (f) : "m" (g));
+  return 0;
+}
diff --git a/compiler-rt/test/builtins/Unit/addtf3_test.c b/compiler-rt/test/builtins/Unit/addtf3_test.c
index 7ca0355e42a..dcd4efe9c90 100644
--- a/compiler-rt/test/builtins/Unit/addtf3_test.c
+++ b/compiler-rt/test/builtins/Unit/addtf3_test.c
@@ -76,7 +76,8 @@ int main()
                      UINT64_C(0x61e58dd6c51eb77c)))
         return 1;
 
-#if (defined(__arm__) || defined(__aarch64__)) && defined(__ARM_FP)
+#if (defined(__arm__) || defined(__aarch64__)) && defined(__ARM_FP) || \
+    defined(i386) || defined(__x86_64__)
     // Rounding mode tests on supported architectures
     const long double m = 1234.0L, n = 0.01L;
 
diff --git a/compiler-rt/test/builtins/Unit/subtf3_test.c b/compiler-rt/test/builtins/Unit/subtf3_test.c
index b95f2ef996d..265ab642ecf 100644
--- a/compiler-rt/test/builtins/Unit/subtf3_test.c
+++ b/compiler-rt/test/builtins/Unit/subtf3_test.c
@@ -69,7 +69,8 @@ int main()
                      UINT64_C(0xa44a7bca780a166c)))
         return 1;
 
-#if (defined(__arm__) || defined(__aarch64__)) && defined(__ARM_FP)
+#if (defined(__arm__) || defined(__aarch64__)) && defined(__ARM_FP) || \
+    defined(i386) || defined(__x86_64__)
     // Rounding mode tests on supported architectures
     const long double m = 1234.02L, n = 0.01L;
 
-- 
2.25.0.341.g760bfbb309-goog

